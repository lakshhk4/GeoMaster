/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.mavenproject1;

import com.mycompany.mavenproject1.DTSManager.CellColorRenderer;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
//import static com.mycompany.mavenproject1.GameSequenceGenerator.codesAndCountry;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JList;
import javax.swing.JOptionPane;

public class DragAndDrop extends javax.swing.JFrame {

    /**
     * Creates new form DragAndDrop
     *
     * @throws com.fasterxml.jackson.core.JsonProcessingException
     */
    DefaultListModel<String> modelForSelected = new DefaultListModel<>();
    DefaultListModel<String> modelForMain = new DefaultListModel<>();
    ArrayList<ClientHandler> clients = new ArrayList();

    ArrayList<String> countryNamesCSV;
    ArrayList<String> countryRegion;

    ArrayList<String> asia;
    ArrayList<String> africa;
    ArrayList<String> europe;
    ArrayList<String> americas;
    ArrayList<String> oceania;

    public DragAndDrop(ArrayList<ClientHandler> clients) throws IOException {
        initComponents();
        this.clients = clients;

        modelForSelected = new DefaultListModel<>();
        selectedQList.setModel(modelForSelected);

        modelForMain = new DefaultListModel<>();
        // DELETE FROM HERE. LATER ON.

        for (Map.Entry<String, String> entry : GameSequenceGenerator.codesAndCountry.entrySet()) {
            modelForMain.addElement(entry.getValue());
        }

        mainList.setModel(modelForMain);

        // Enabling drag and drop
        mainList.setDragEnabled(true);
        mainList.setTransferHandler(new DTSManager(this));
        mainList.setCellRenderer(new CellColorRenderer(this)); // pass DragAndDrop so that the ColorRenderer has access to the model lists

        selectedQList.setDragEnabled(true);
        selectedQList.setTransferHandler(new DTSManager(this));

        // setting drop modes to insert 
        mainList.setDropMode(DropMode.INSERT);
        selectedQList.setDropMode(DropMode.INSERT);

        createRegionLists();

    }

    public void createRegionLists() throws FileNotFoundException, IOException {

        BufferedReader br = new BufferedReader(new FileReader("/Users/lakshhkhatri/Downloads/all.csv"));

        countryNamesCSV = new ArrayList();
        countryRegion = new ArrayList();

        String line;
        while ((line = br.readLine()) != null) {
            // use comma as separator
            String[] cols = line.split(",");
            System.out.println("Coulmn 1= " + cols[0] + " , Column 5=" + cols[5]);
            countryNamesCSV.add(cols[0]);
            countryRegion.add(cols[5]);

        }

        // World, Asia, Africa, Europe, Americas, Oceania
        asia = new ArrayList();
        africa = new ArrayList();
        europe = new ArrayList();
        americas = new ArrayList();
        oceania = new ArrayList();

        // create region lists
        for (int i = 0; i < countryNamesCSV.size(); i++) {
            if ("Asia".equals(countryRegion.get(i))) {
                asia.add(countryNamesCSV.get(i));
            } else if ("Africa".equals(countryRegion.get(i))) {
                africa.add(countryNamesCSV.get(i));
            } else if ("Europe".equals(countryRegion.get(i))) {
                europe.add(countryNamesCSV.get(i));
            } else if ("Americas".equals(countryRegion.get(i))) {
                americas.add(countryNamesCSV.get(i));
            } else if ("Oceania".equals(countryRegion.get(i))) {
                oceania.add(countryNamesCSV.get(i));
            }
        }

    }

    public String returnToList(int listNumber) {
        // 0 for main. 1 for selected
        if (listNumber == 0) {
            return (mainList.toString());
        } else {
            return (selectedQList.toString());
        }
    }

    public JList returnSelectedQList() {
        return selectedQList;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        selectedQList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        mainList = new javax.swing.JList<>();
        searchInput = new javax.swing.JTextField();
        startGameBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        regionFilterBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setText("Search:");

        jLabel3.setIcon(new javax.swing.ImageIcon("/Users/lakshhkhatri/Downloads/Untitled design (1).png")); // NOI18N
        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        selectedQList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(selectedQList);

        mainList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(mainList);

        searchInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchInputActionPerformed(evt);
            }
        });
        searchInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchInputKeyReleased(evt);
            }
        });

        startGameBtn.setText("Start Game");
        startGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGameBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Game Questions");

        regionFilterBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "World","Asia", "Europe", "Americas", "Africa", "Oceania" }));
        regionFilterBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regionFilterBoxActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon("/Users/lakshhkhatri/Downloads/Untitled design (1).png")); // NOI18N
        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(startGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(regionFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(jLabel2))
            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(searchInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(234, 234, 234)
                .addComponent(startGameBtn))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(regionFilterBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2))
            .addComponent(jLabel4)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchInputKeyReleased
        // TODO add your handling code here:

        searchFilter(searchInput.getText());


    }//GEN-LAST:event_searchInputKeyReleased

    private void searchInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchInputActionPerformed

    private void startGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startGameBtnActionPerformed
        // TODO add your handling code here:

        this.setVisible(false);

        Random rand = new Random();
        Set codes = GameSequenceGenerator.codesAndCountry.keySet();
        Object[] countryCodeKeys = codes.toArray();
        //Set countries = (Set) GameSequenceGenerator.codesAndCountry.values();
        //Object[] countryValues = countries.toArray();

        ArrayList<String> countryValuesArray = new ArrayList();
        /*for (Object country : countryValues) {
        countryValuesArray.add((String) country);
        }
         */
        for (int i = 0; i < countryCodeKeys.length; i++) {
            countryValuesArray.add((String) GameSequenceGenerator.codesAndCountry.get((String) countryCodeKeys[i]));

        }

        //Server.scores = new int[clients.size()][numberOfQuestions];
        Server.scores = new int[clients.size()];
        Server.responseCollected = new int[clients.size()];

        // generate Game Sequence
        if (selectedQList.getModel().getSize() >= 1) {
            startGameBtn.setEnabled(false);

            List<String> questions = new ArrayList();

            for (int j = 0; j < selectedQList.getModel().getSize(); j++) {
                questions.add(selectedQList.getModel().getElementAt(j));
            }

            // generating false options for each question
            String gameSequence = "!";
            for (int i = 0; i < questions.size(); i++) {

                String[] falseAnswers = new String[3];

                int count = 0;
                while (falseAnswers[0] == null || falseAnswers[1] == null || falseAnswers[2] == null) {
                    int incorrectAnswerIndex = rand.nextInt(254);
                    String incorrectCode = (String) countryCodeKeys[incorrectAnswerIndex];

                    boolean wasPreviousAnswer = false;

                    for (String existingCode : questions) {  //  alrAsked is the array w previously asked Q
                        if (incorrectCode.equals(existingCode)) { // since Strings are non-primative, we need .equals();
                            wasPreviousAnswer = true;
                        }
                    }

                    // At this point, a falseAnswer, which hasn't been the correct answer of any question is chosen
                    if (wasPreviousAnswer == false) {
                        falseAnswers[count] = GameSequenceGenerator.codesAndCountry.get(incorrectCode);
                        count++;
                    }
                }

                String imageFileName = "";

                int correctAnsIndex = countryValuesArray.indexOf(questions.get(i));
                imageFileName += countryCodeKeys[correctAnsIndex] + ".png";
                gameSequence += "," + imageFileName + "," + questions.get(i) + "," + falseAnswers[0] + "," + falseAnswers[1] + "," + falseAnswers[2] + "," + "!";

            }

            System.out.println(gameSequence);
            // send game sequence to all clients
            for (ClientHandler clientHandler : clients) {
                try {
                    clientHandler.sendData(Integer.toString(questions.size())); // number of game questions
                    clientHandler.sendData(gameSequence);
                } catch (IOException ex) {
                    Logger.getLogger(GameControlsTeacher.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("Manual Game sequence sent to " + clientHandler.toString());
            }

            //Server.responseCollected = new int[clients.size()];
        } else {
            String infoMessage = "Game Must have at least one question! Drag and drop from the left masterlist into the game questions list";
            String titleBar = "Error: No Question Selected";
            JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
// pop up window, game must have at least one question!
        }


    }//GEN-LAST:event_startGameBtnActionPerformed

    private void regionFilterBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regionFilterBoxActionPerformed
        // TODO add your handling code here:
        DefaultListModel<String> filteredModel = new DefaultListModel();

        String chosenRegion = (String) regionFilterBox.getSelectedItem();

        if ("Asia".equals(chosenRegion)) {
            for (int i = 0; i < asia.size(); i++) {
                filteredModel.addElement(asia.get(i));
            }
            mainList.setModel(filteredModel);
        }

        if ("Europe".equals(chosenRegion)) {
            for (int i = 0; i < europe.size(); i++) {
                filteredModel.addElement(europe.get(i));
            }
            mainList.setModel(filteredModel);
        }

        if ("Africa".equals(chosenRegion)) {
            for (int i = 0; i < africa.size(); i++) {
                filteredModel.addElement(africa.get(i));
            }
            mainList.setModel(filteredModel);
        }

        if ("Americas".equals(chosenRegion)) {
            for (int i = 0; i < americas.size(); i++) {
                filteredModel.addElement(americas.get(i));
            }
            mainList.setModel(filteredModel);
        }

        if ("Oceania".equals(chosenRegion)) {
            for (int i = 0; i < oceania.size(); i++) {
                filteredModel.addElement(oceania.get(i));
            }
            mainList.setModel(filteredModel);
        }

        if ("World".equals(chosenRegion)) {
            mainList.setModel(modelForMain);
        }


    }//GEN-LAST:event_regionFilterBoxActionPerformed

    public void searchFilter(String searchItem) {
        DefaultListModel<String> filteredModel = new DefaultListModel();

        String chosenRegion = (String) regionFilterBox.getSelectedItem();
        DefaultListModel<String> currentRegionModel = new DefaultListModel();

        if ("Asia".equals(chosenRegion)) {
            for (String country : asia) {
                currentRegionModel.addElement(country);
            }
        }

        if ("Europe".equals(chosenRegion)) {
            for (String country : europe) {
                currentRegionModel.addElement(country);
            }
        }

        if ("Americas".equals(chosenRegion)) {
            for (String country : americas) {
                currentRegionModel.addElement(country);
            }
        }

        if ("Africa".equals(chosenRegion)) {
            for (String country : africa) {
                currentRegionModel.addElement(country);
            }
        }

        if ("Oceania".equals(chosenRegion)) {
            for (String country : oceania) {
                currentRegionModel.addElement(country);
            }
        }

        if ("World".equals(chosenRegion)) {
            currentRegionModel = modelForMain;
        }

// 
        for (int i = 0; i < currentRegionModel.size(); i++) { // change to mainlist.getModel() if we want search to work in the scope of the region or all.
            if (currentRegionModel.get(i).toLowerCase().startsWith(searchItem.toLowerCase())) {
                filteredModel.addElement(currentRegionModel.get(i));
            }
        }

        mainList.setModel(filteredModel);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList<String> mainList;
    private javax.swing.JComboBox<String> regionFilterBox;
    private javax.swing.JTextField searchInput;
    private javax.swing.JList<String> selectedQList;
    private javax.swing.JButton startGameBtn;
    // End of variables declaration//GEN-END:variables
}
